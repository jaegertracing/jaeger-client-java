import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

import java.util.regex.Pattern

plugins {
    id "org.jruyi.thrift" version "0.4.0"
    id "jacoco"
    id "com.github.hierynomus.license" version "0.15.0"
    id "com.github.johnrengelman.shadow" version "5.0.0"
    id "net.ltgt.errorprone" version "0.0.14"
    id 'ru.vyarus.animalsniffer' version '1.5.0'
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'io.codearte.nexus-staging' version '0.20.0'
    id "de.marcphilipp.nexus-publish" version "0.2.0"
    id 'com.github.ben-manes.versions' version '0.21.0'
}

ext.developmentVersion = getProperty('developmentVersion','0.35.1-SNAPSHOT')

ext.opentracingVersion = getProperty('opentracingVersion','0.32.0')
ext.guavaVersion = getProperty('guavaVersion','18.0')
ext.apacheThriftVersion = getProperty('apacheThriftVersion','0.12.0')
ext.jerseyVersion = getProperty('jerseyVersion','2.22.2')
ext.slf4jVersion = getProperty('slf4jVersion','1.7.25')
ext.gsonVersion = getProperty('gsonVersion','2.8.2')
ext.tracerResolverVersion = getProperty('tracerResolverVersion','0.1.5')
ext.micrometerVersion = getProperty('micrometerVersion','1.0.0')
ext.okhttpVersion = getProperty('okhttpVersion','3.9.0')

ext.junitVersion = '4.12'
ext.mockitoVersion = '2.12.0'
ext.powermockitoVersion  = '1.7.0'
ext.junitDataProviderVersion = '1.13.1'
ext.awaitilityVersion = '3.0.0'
ext.logbackVersion = '1.2.3'

ext.skipSigning = project.hasProperty('skipSigning') && skipSigning.toBoolean()

allprojects {
    apply plugin: 'idea' // intellij support
    apply plugin: 'jacoco'

    group = 'io.jaegertracing'
    version = getVersionForBuild()

    repositories {
        mavenLocal()
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'ru.vyarus.animalsniffer'
    apply plugin: 'com.github.hierynomus.license'
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'signing'
    apply plugin: 'checkstyle'
    apply plugin: 'maven-publish'


    compileJava {
        sourceCompatibility = 1.6
        targetCompatibility = 1.6
    }

    compileTestJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    jar {
        from sourceSets.main.output
    }

    if (!version.endsWith("SNAPSHOT")) {
        nexusStaging {
            packageGroup = "io.jaegertracing"
            username = ossrhUsername
            password = ossrhPassword
            // Dealing with error "Wrong number of received repositories in state 'open'" (http://bit.ly/2ybracm)
            numberOfRetries = 50
            delayBetweenRetriesInMillis = 3000
        }

        publish.finalizedBy closeAndReleaseRepository
    }

    animalsniffer {
        sourceSets = [sourceSets.main]
    }

    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

    task listJars {
        doLast {
            configurations.compile.each { File file -> println file.name }
        }
    }

    checkstyle {
        configFile = rootProject.file('config/checkstyle/checkstyle.xml')
        toolVersion = "7.6.1"
        configProperties.checkstyleSuppressions = "${rootProject.rootDir}/config/checkstyle/suppressions.xml"
    }

    license {
        header rootProject.file('license-template')
        skipExistingHeaders true
        strictCheck true
        include "**/*.java"
        ext.year = Calendar.getInstance().get(Calendar.YEAR)
        ext.name = 'The Jaeger Authors'
        ignoreFailures = false
        mapping {
            java = 'SLASHSTAR_STYLE'
        }
    }

    check.dependsOn tasks.license

    apply from: '../gradle/publish.gradle'

    test {
        testLogging {
            events TestLogEvent.FAILED, TestLogEvent.SKIPPED
            exceptionFormat TestExceptionFormat.FULL

            // remove standard output/error logging from --info builds
            info.events = [
                TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED
            ]
            info.exceptionFormat TestExceptionFormat.FULL
        }
    }

    dependencies {
        annotationProcessor 'org.projectlombok:lombok:1.18.2'
        compileOnly 'org.projectlombok:lombok:1.18.2'
        compileOnly 'org.codehaus.mojo:animal-sniffer-annotations:1.16'
    }

    signing {
        required { !skipSigning }
    }
}

task codeCoverageReport(type: JacocoReport, group: 'Coverage reports') {
    dependsOn(subprojects*.test)

    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        html.enabled = true
        xml.enabled = true
        xml.destination = file("${buildDir}/reports/jacoco/report.xml")
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['**/crossdock/**',
                              '**/thrift/**',
                              '**/thriftjava/**',
                    ])
        })
    }
}

task printVersion {
    println getVersionForBuild()
}

configure(subprojects.findAll {it.name != 'jaeger-thrift'}) {
   apply plugin: 'net.ltgt.errorprone'
   dependencies {
     errorprone 'com.google.errorprone:error_prone_core:2.1.1'
   }
    tasks.withType(JavaCompile) {
        // These are disabled because of a bug with errorprone. See https://github.com/google/error-prone/issues/750
        options.compilerArgs += [ '-Xep:NestedInstanceOfConditions:OFF',  '-Xep:InstanceOfAndCastMatchWrongType:OFF' ]
    }
    tasks.withType(Jar) {
        manifest {
            attributes('Implementation-Title': project.name, 'Implementation-Version': project.version, 'Specification-Version': project.version)
        }
    }
}

def getVersionForBuild() {
    String candidateVersion = System.env.TRAVIS_TAG

    if (null == candidateVersion || candidateVersion.isEmpty()) {
        return ext.developmentVersion
    }

    if (Pattern.compile("[v]?((\\d+)\\.(\\d+)\\.(\\d+))(\\-RC\\d+)?").matcher(candidateVersion).matches()) {
        return candidateVersion.drop(1)
    }

    return ext.developmentVersion
}

def getProperty(name, defaultValue) {
    project.properties[name] ?: defaultValue
}
