description = 'Core library for jaeger-client'

dependencies {
    compile project(':jaeger-thrift')
    compile group: 'io.opentracing', name: 'opentracing-api', version: opentracingVersion
    compile group: 'io.opentracing', name: 'opentracing-util', version: opentracingVersion
    compile group: 'com.google.code.gson', name: 'gson', version: gsonVersion
    compile group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion
    compile group: 'com.squareup.okhttp3', name: 'okhttp', version: '3.9.0'

    // Testing frameworks
    testCompile project(path: ':jaeger-thrift', configuration: 'tests')

    // Jersey dependencies for unit tests
    testCompile group: 'org.glassfish.jersey.test-framework.providers', name: 'jersey-test-framework-provider-grizzly2', version: jerseyVersion

    testCompile group: 'junit', name: 'junit', version: junitVersion
    testCompile group: 'org.mockito', name: 'mockito-core', version: mockitoVersion
    testCompile group: 'com.tngtech.java', name: 'junit-dataprovider', version: junitDataProviderVersion
    testCompile group: 'org.awaitility', name: 'awaitility', version: awaitilityVersion
    testCompile group: 'ch.qos.logback', name: 'logback-classic', version: logbackVersion
    testCompile group: 'io.micrometer', name: 'micrometer-registry-prometheus', version: micrometerVersion

    signature 'org.codehaus.mojo.signature:java16:1.1@signature'
}

apply plugin: 'com.github.johnrengelman.shadow'
shadowJar {
    relocate 'okhttp', 'jaeger.okhttp'
    classifier 'okhttp381'
}

task testJar(type: Jar, dependsOn: testClasses) {
    baseName = "test-${project.archivesBaseName}"
    from sourceSets.test.output
}

configurations {
    tests
}

artifacts {
    archives(shadowJar.archivePath) {
        builtBy shadowJar
    }
    tests testJar
}

task jaegerVersion {
    doLast {
        def dirPath = 'src/main/resources/io/jaegertracing/'
        new File(projectDir, dirPath).mkdirs()
        def propFile = new File(projectDir, "${dirPath}jaeger.properties").getAbsolutePath()
        new File(propFile).write("jaeger.version=${project.version}")
    }
}

compileJava.dependsOn jaegerVersion

