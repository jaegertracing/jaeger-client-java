description = 'Core library for jaeger-client'

dependencies {
    compile project(':jaeger-thrift')
    compile group: 'io.opentracing', name: 'opentracing-api', version: opentracingVersion
    compile group: 'com.google.code.gson', name: 'gson', version: gsonVersion
    compile group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion

    // Testing frameworks
    // Jersey dependencies for unit tests
    testCompile group: 'org.glassfish.jersey.containers', name: 'jersey-container-grizzly2-http', version: jerseyVersion
    testCompile group: 'org.glassfish.jersey.containers', name: 'jersey-container-servlet', version: jerseyVersion
    testCompile group: 'org.glassfish.jersey.core', name: 'jersey-client', version: jerseyVersion
    testCompile group: 'org.glassfish.jersey.media', name: 'jersey-media-json-jackson', version: jerseyVersion
    testCompile group: 'org.glassfish.jersey.media', name: 'jersey-media-moxy', version: '2.12'

    testCompile group: 'junit', name: 'junit', version: junitVersion
    testCompile group: 'org.mockito', name: 'mockito-core', version: mockitoVersion
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            includes = ["**/jaeger.properties"]
        }
    }

    test {
        java {
            srcDir 'src/test/java'
        }
    }
}

jar {
    from sourceSets.main.output
    manifest {
        attributes('Implementation-Title': 'jaeger-core', 'Implementation-Version': project.version)
    }
}

task jaegerVersion << {
    def dirPath = 'src/main/resources/com/uber/jaeger/'
    new File(projectDir, dirPath).mkdirs()
    def propFile = new File(projectDir, "${dirPath}jaeger.properties").getAbsolutePath()
    new File(propFile).write("jaeger.version=${project.version}")
}

compileJava.dependsOn jaegerVersion
