apply plugin: 'org.jruyi.thrift'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'

description = 'Core library for jaeger-client'

dependencies {
    compile group: 'io.opentracing', name: 'opentracing-api', version: opentracingVersion
    compile group: 'org.apache.thrift', name: 'libthrift', version: apacheThriftVersion
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: jacksonVersion
    compile group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion

    // Testing frameworks
    // Jersey dependencies for unit tests
    testCompile group: 'org.glassfish.jersey.containers', name: 'jersey-container-grizzly2-http', version: jerseyVersion
    testCompile group: 'org.glassfish.jersey.containers', name: 'jersey-container-servlet', version: jerseyVersion
    testCompile group: 'org.glassfish.jersey.core', name: 'jersey-client', version: jerseyVersion
    testCompile group: 'org.glassfish.jersey.media', name: 'jersey-media-json-jackson', version: jerseyVersion
    testCompile group: 'org.glassfish.jersey.media', name: 'jersey-media-moxy', version: '2.12'

    testCompile group: 'junit', name: 'junit', version: junitVersion
    testCompile group: 'org.mockito', name: 'mockito-all', version: mockitoVersion
    // TODO use only one mocking framework
    testCompile group: 'org.powermock', name: 'powermock-api-mockito', version: powermockVersion
    testCompile group: 'org.powermock', name: 'powermock-core', version: powermockVersion
    testCompile group: 'org.powermock', name: 'powermock-module-junit4', version: powermockVersion
}

compileThrift {
    sourceDir "${projectDir}/../idl/thrift"
    outputDir 'src/main/gen-java'
    generator 'java', 'private-members'
    createGenFolder false
}

javadoc {
    exclude '**/gen-java/**'
    exclude '**/com/twitter/zipkin/thriftjava/**'
    exclude '**/com/uber/jaeger/agent/thrift/**'
    exclude '**/com/uber/jaeger/thrift/sampling_manager/**'
    exclude '**/com/uber/jaeger/crossdock/thrift/**'
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
        html.destination "${buildDir}/jacocoHtml"
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,
                exclude: [
                    '**/gen-java/**',
                    '**/*Test*',
                    '**/exception/**',
                    '**/com/twitter/zipkin/thriftjava/**',
                    '**/com/uber/jaeger/agent/thrift/**',
                    '**/com/uber/jaeger/thrift/sampling_manager/**',
                    '**/com/uber/jaeger/crossdock/tracetest/**'
                ])
        })
    }
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
            srcDir 'src/main/gen-java'
        }
        resources {
            srcDirs = ['src/main/gen-java']
            includes = ["**/jaeger.properties"]
        }
    }

    test {
        java {
            srcDir 'src/test/java'
            srcDir 'src/test/gen-java'
        }
    }
}

jar {
    from sourceSets.main.output
    manifest {
        attributes('Implementation-Title': 'jaeger-core', 'Implementation-Version': project.version)
    }
}

task jaegerVersion << {
    def propFile = new File(projectDir,
            'src/main/gen-java/com/uber/jaeger/jaeger.properties'
    ).getAbsolutePath()
    new File(propFile).write("jaeger.version=${project.version}")
}

compileJava.dependsOn jaegerVersion
